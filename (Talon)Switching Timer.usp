/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Mayo Clinic
System Name:
System Number:
Programmer:		Brandon Richards
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
                        
#DEFINE_CONSTANT	Ready 0
#DEFINE_CONSTANT	Busy 1	

#DEFINE_CONSTANT	PwrOff 0
#DEFINE_CONSTANT	PwrWarm 1
#DEFINE_CONSTANT	PwrOn 2
#DEFINE_CONSTANT	PwrCool 3

#DEFINE_CONSTANT	PwrReqDone 0
#DEFINE_CONSTANT	PwrReqOn 1
#DEFINE_CONSTANT	PwrReqOff 2

#DEFINE_CONSTANT	InpDone 0
#DEFINE_CONSTANT	InpStep 1
#DEFINE_CONSTANT	InpVal 2

#DEFINE_CONSTANT	ModeDone 0
#DEFINE_CONSTANT	ModeStep 1
#DEFINE_CONSTANT	ModeVal 2


	
// #CATEGORY "" 
#CATEGORY "39" // Device Extender Modules
// #DEFAULT_VOLATILE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Poll, PowerOn, PowerOff, PowerStatus, Input, Mode;
ANALOG_INPUT  InputDirect, ModeDirect, PowerOnTime, PowerOffTime, InputChangeTime, ModeChangeTime;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT DeviceBusy, PowerOnPulse, PowerOffPulse, InputStepPulse, ModeStepPulse, InputChange, ModeChange;
ANALOG_OUTPUT BusyTimeOut, Status, NewInputDirect, NewModeDirect; 
// STRING_OUTPUT 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER  ReqPwr, ReqInp, ReqMode, NewStatus, BusyTime, NewBusyTimeOut, OldBusyTimeOut;

// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH PowerOn
{
 	ReqPwr = PwrReqOn;
}

PUSH PowerOFf
{
	ReqPwr = PwrReqOff;
}

Push Input
{
		ReqInp = InpStep;
}

Push Mode
{
 	ReqMode = ModeStep;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE InputDirect
{
	If (InputDirect >0)
	{
		ReqInp = InpVal;
		ReqPwr = PwrReqOn;
	} 
	else if (InputDirect = 0) {
		ReqPwr = PwrReqOff;
	}
}

CHANGE ModeDirect

{
	ReqMode = ModeVal;
}

CHANGE PowerStatus
{
 	If (PowerStatus = 1 & Status = PwrOff)
	{
		NewStatus = PwrWarm;
		BusyTime = PowerOnTime;
	}
	Else If (PowerStatus = 1 & Status = PwrCool)
	{
		NewStatus = PwrWarm;
		BusyTime = PowerOnTime;
    }
	Else IF (PowerStatus = 0 & Status = PwrOn)
	{
		NewStatus = PwrCool;
		BusyTime = PowerOffTime;
	}
	Else IF (PowerStatus = 0 & Status = PwrWarm)
	{
		NewStatus = PwrCool;
		BusyTime = PowerOffTime;
	}
}

CHANGE Poll
{
	If (BusyTime > Ready + 24)
	{
		BusyTime = BusyTime - 25;
		DeviceBusy = Busy;
		NewBusyTimeOut = Busytime / 100; 
		If (OldBusyTimeOut = 0)
		{
			OldBusyTimeOut = NewBusyTimeOut;
			If(NewBusyTimeOut > 0)
			{
				BusyTimeOut = NewBusyTimeOut;
            }
		}
        Else If (NewBusyTimeOut < OldBusyTimeOut & BusyTime > 24)
		{
			OldBusyTimeOut = NewBusyTimeOut;
			If(NewBusyTimeOut >0)
			{
				BusyTimeOut = NewBusyTimeOut;
			}
		}
	}
	ELSE IF (BusyTime = 0 & DeviceBusy = Busy)
	{
		DeviceBusy = Ready;
		BusyTime = 0;
		BusyTimeOut = 0;
	}
	

	SWITCH (Status)
	{
		Case (PwrOff):
		{
			If (ReqPwr = PwrReqon & BusyTime = Ready)
			{
				ReqPwr = PwrReqDone;	
				NewStatus = PwrWarm;
				Pulse(10,PowerOnPulse);
				BusyTime = PowerOnTime;
			}
			Else If (ReqInp = InpVal & BusyTime = Ready & InpVal > 0)
        	{
			ReqPwr = PwrReqOn;
			}
		}
        Case (PwrWarm):
		{
			If (BusyTime = Ready)
			{
				NewStatus = PwrOn;
			}
			If (ReqPwr = PwrReqOff)
			{
				ReqInp = InpDone;
			}
		}
        Case (PwrOn):
		{
			If  (ReqPwr = PwrReqOff & BusyTime = Ready)
			{
				ReqPwr = PwrReqDone;
				NewStatus = PwrCool;
				Pulse(10, PowerOffPulse);
				BusyTime = PowerOffTime;
				NewInputDirect = 0;
			}
			Else If (ReqInp = InpStep & BusyTime = Ready)
			{
				ReqInp = InpDone;
				Pulse(10, InputStepPulse);
				BusyTime = InputChangeTime;
			}
			Else If (ReqInp = InpVal & BusyTime = Ready)
			{
        		ReqInp = InpDone;
				If (InputDirect <> NewInputDirect)
				{
					NewInputDirect = InputDirect;
					BusyTime = InputChangeTime;
					Pulse (10, InputChange);
				}			
			} 
		
			Else If (ReqMode = ModeStep & BusyTime = Ready)
			{
				ReqMode = ModeDone;
				Pulse(10,ModeStepPulse);
				BusyTime = ModeChangeTime;
			}
            Else If (ReqMode = ModeVal & BusyTime = Ready)
			{
				ReqMode = ModeDone;
				NewModeDirect = ModeDirect;
				BusyTime = ModeChangeTime;
				Pulse (10, ModeChange);
			}
		}
		Case (PwrCool):
		{
			If (BusyTime = Ready)
			{
				NewStatus = PwrOff;
			}
		}
	}
	Status = NewStatus;
}
			

Function Main()
{

	// initialize local variables.

	if ( WaitForInitializationComplete() < 0 ) 
    {
  		return;
    }
     // now we can access variables that were processed with the logic "1" solution
 		ReqPwr = 0;
		ReqInp = 0;
		ReqMode = 0;
		NewStatus = 0;
		BusyTime = 0;
		NewBusyTimeOut = 0;
		OldBusyTimeOut = 0;
}
